#!/usr/bin/perl
#
# Forked from http://www.opensource.apple.com/source/CyrusIMAP/CyrusIMAP-125.11/build_extras/bin/compile_et?txt
#
# Copyright 2002 by the Massachusetts Institute of Technology
#
# All rights reserved.
#
# Permission to use, copy, modify, and distribute this software and its
# documentation for any purpose and without fee is hereby granted,
# provided that the above copyright notice appear in all copies and that
# both that copyright notice and this permission notice appear in
# supporting documentation, and that the name of the Massachusetts
# Institute of Technology (M.I.T.) not be used in advertising or publicity
# pertaining to distribution of the software without specific, written
# prior permission.
#
# M.I.T. DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING
# ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN NO EVENT SHALL
# M.I.T. BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR
# ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS,
# WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
# ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS
# SOFTWARE.

use strict;
use integer;

#
# Tables and constants used to calculate the base error code from the name
#
my $errorCodeRange = 8;
my $charShift = 6;
my %charToNumber = (
  'A' =>  1, 'B' =>  2, 'C' =>  3, 'D' =>  4, 'E' =>  5, 'F' =>  6,
  'G' =>  7, 'H' =>  8, 'I' =>  9, 'J' => 10, 'K' => 11, 'L' => 12,
  'M' => 13, 'N' => 14, 'O' => 15, 'P' => 16, 'Q' => 17, 'R' => 18,
  'S' => 19, 'T' => 20, 'U' => 21, 'V' => 22, 'W' => 23, 'X' => 24,
  'Y' => 25, 'Z' => 26,

  'a' => 27, 'b' => 28, 'c' => 29, 'd' => 30, 'e' => 31, 'f' => 32,
  'g' => 33, 'h' => 34, 'i' => 35, 'j' => 36, 'k' => 37, 'l' => 38,
  'm' => 39, 'n' => 40, 'o' => 41, 'p' => 42, 'q' => 43, 'r' => 44,
  's' => 45, 't' => 46, 'u' => 47, 'v' => 48, 'w' => 49, 'x' => 50,
  'y' => 51, 'z' => 52,

  '0' => 53, '1' => 54, '2' => 55, '3' => 56, '4' => 57, '5' => 58,
  '6' => 59, '7' => 60, '8' => 61, '9' => 62, '_' => 63,
);

#
# Local variables:
#
my $etOutDir;
my $etBase;
my @etFiles;
my $etFile;
my $etName;
my $etBuffer;

#
# Argument parsing:
#
while (my $arg = shift @ARGV) {
  $_ = $arg;
  if    (/^--etout$/)      { $etOutDir = shift @ARGV; }
  elsif (/^--base$/)       { $etBase = shift @ARGV; }
  elsif (/^--help$/)       { print "$0: Usage: [--etout outputDirectory] ";
			     print "[--base errorBase] ";
			     print "errorTable\n";
			     exit 0; }
  else                     { push @etFiles, $arg; }
}
if (scalar @etFiles == 0) {
  die "No error table specified\n";
}

$etFile = $etFiles[0];

#
# Pull out the base name of error table file:
#
$etFile =~ /([^\/]+)\.et$/ or die "Invalid error table: '$etFile'\n";
my $outFilePrefix = $1;

#
# If the output directories were not specified, use the working directory:
#
if ($etOutDir eq "") {
  $etOutDir = `pwd`;
  chomp $etOutDir;
}
if ($etOutDir =~ /[^\/]+$/) {
  $etOutDir .= "/";  # Add the tailing '/'
}


#
# The output files:
#
my $outJS = "${etOutDir}${outFilePrefix}.js";


#
# Read in the error table:
#
open ETFILE, "${etFile}" or die "Unable to open '${etFile}': $!\n";
{
  undef $/; # Ignore end-of-line delimiters in the file
  $etBuffer = " " . <ETFILE> . " ";
}
close ETFILE;

# Get rid of comments and convert white space into single spaces
$etBuffer =~ s@\#.*?\n@\n@xg;
$etBuffer =~ tr! \t\n\r! !s;

# Pull out the header information:
# We also support "error_table_base" for the base code
$_ = $etBuffer;
if (/\s+(error_table|et)\s+(\w+)\s+/)                     { $etName = $2; }
if (/\s+(error_table_base|et_base)\s+(-?[0-9]+)\s+/)      { $etBase ||= $2; }

#
# Make sure we got a valid error table name:
#
$etName || die "Error table '$etFile' missing error_table statement.\n";

$etName =~ /^[A-Za-z]\w*/ or die "Error table name must being with a letter\n";
if (length($etName) > 4) {
  print "Error table name '$etName' must be 4 characers or less; truncating...\n";
  $etName = substr($etName, 0, 4);
}

#
# Calculate the base error code from the error table name
# if we do not already have a base error code.
#
# Algorithm:
# Use %charToNumber to convert each letter of the error table
# name to a 6-bit value, shift the bits onto the base, and when
# done left-shift by 8 to make space for 256 error codes in the
# low eight bits.
#
# Shift 6-bit values ("abcd") onto the end:
#     $etBase = 00000000aaaaaabbbbbbccccccdddddd
# Then a final shift by eight:
#     $etBase = aaaaaabbbbbbccccccdddddd00000000
#
if (!$etBase) {
  $etBase = 0;
  for (my $i = 0; $i < length($etName); $i++) {
    $etBase <<= $charShift;
    $etBase += $charToNumber{ substr($etName, $i, 1) };
  }
  $etBase <<= $errorCodeRange;
  printf "Error Table \"%s\" has base $etBase\n", $etName, $etBase;
}

#
# Remove the last "error_table <name>" and everything before it.
#
my @errorTableSplit = split /\s+(error_table|et)\s+/, $etBuffer;
$etBuffer = pop @errorTableSplit or die "$0: Expected error_table in '$etFile'\n";

#
# Remove the first "end" and everything after it.
#
my @endSplit = split /\s+end\s+/, $etBuffer;
$etBuffer = shift @endSplit or die "$0: Unexpected end of file '$etFile'\n";

#
# Get the error codes:
#
my @errorCodes = split /\s+(error_code|ec|index)\s+/, $etBuffer;

#
# Create the output files:
#
open OUTJS, ">${outJS}" or
    die "Unable to open '${outJS}' for writing: $!\n";

#
# Created the "auto-generated" preludes:
#
print OUTJS "{\n";
print OUTJS "\"\@comment\": \"This file is automatically generated; please do not edit it.\",\n";
printf OUTJS "\"error_table_name\": \"%s\",\n", $etName;
printf OUTJS "\"error_table_base\": %ld,\n", $etBase;
print OUTJS "\"error_table\": [\n";

#
# Loop over the error codes, generating the lines for the output files:
#
my $errorCount = 0;
while (my $errorCode = shift @errorCodes) {
  if ($errorCode eq "error_code" || $errorCode eq "ec") {
    my $arguments = shift @errorCodes;
    if ($arguments =~ /^\s*(\w+)\s*,\s*"([^"]*)"\s*$/) {
      my $errorNameString = $1;
      my $messageString = $2;
      my $code = $etBase + $errorCount;

      # Add the error to the file:
      printf OUTJS "{ \"name\":\"%s\", \"code\":%ld, \"message\":\"%s\" }",
	$errorNameString, $code, $messageString;
      printf OUTJS "," if (scalar @errorCodes > 0);
      printf OUTJS "\n";
      $errorCount++;
    } else {
      print "Unknown syntax 'error_code $arguments'.\n";
    }
  } elsif ($errorCode eq "index") {
    my $arguments = shift @errorCodes;
    if ($arguments =~ /^\s*([0-9]+)\s*$/) {
      while ($errorCount < $1) {
	# Skip these offsets in text structure:
	print OUTJS "\n";
	$errorCount++;
      }
    } else {
      print "Unknown syntax 'index $arguments'.\n";
    }
  }
}

#
# Complete the output files:
#
print OUTJS "]\n";
print OUTJS "}\n";

close OUTJS;
